df$z <- cos(df$r^2)*exp(-df$r/6)
df
}
data_xyz <- pp(100)
data_z <- acast(data_xyz, x~y, value.var = "z")
plot_ly(z = data_z,  type = "surface")
6.4e6
# r - promien, a - kąt pomiędzy punktem a równikem,
# b - kąt pomiędzy rzutem puntky na płaszczyznę zawierającą równik,
# a południkiem Greenwhich
rab2xyz <- function(r, a, b) {
x <- r*cos(a)*cos(b)
y <- r*cos(a)*sin(b)
z <- r*sin(a)
return(list(x = x, y = y, z = z))
}
N <- 10000
R <- 6.4e6 # m
alpha <- runif(N, -pi/2, pi/2)
beta <- runif(N, 0, 2*pi)
XYZ <- rab2xyz(R, alpha, beta)
str(XYZ)
acast
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plotly_start.R', encoding = 'UTF-8')
str(XYZ)
data_z
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plotly_start.R', encoding = 'UTF-8')
XYZ <- as.data.frame(rab2xyz(R, alpha, beta))
XYZ
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plotly_start.R', encoding = 'UTF-8')
plot_ly(XYZ, x = ~x, y = ~y, z = ~z,  type = "surface")
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plotly_start.R', encoding = 'UTF-8', echo=TRUE)
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter")
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter3d")
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plotly_start.R', encoding = 'UTF-8')
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter3d"["markers"])
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scattergl")
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter3d")
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter3d+markers")
plot_ly(XYZ, x = ~x, y = ~y, z = ~z, type = "scatter3d", mode = "markers")
install.packages("plot3d")
install.packages("plot3D")
?plot3d
library(plot3D)
?plot3D
?spheresurf3D
spheresurf3D()
spheresurf3D
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
M
phi
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
install.packages("plot3Drgl")
library(plot3Drgl)
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
surf3D(x, y, z, colvar = NULL, colkey = FALSE, shade = 0.5,
box = FALSE, theta = 60)
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
spin3d()
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
?rgl
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
?rotate3d
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
rm(list = ls())
?surface3d
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d.R')
?spheres3d
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
rgl.init()
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
rm(list = ls())
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
?wire3d
ellips <- ellipse3d(cov(cbind(x,y,z)),
centre=c(mean(x), mean(y), mean(z)), level = 0.95)
x <- c(1,2,3)
y <- c(3,5,t)
y <- c(3,5,3)
t
z <- c(34,24,1)
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
rm(list = ls())
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
katy
head(kay)
head(katy)
?expand.grid
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
?tmesh3d
tetrahedron3d
tetra3d.vb
identityMatrix()
tetrahedron3d()
cov(cbind(X,Y,Z))
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
ellipse3d()
ellipse3d
?ellipse3d
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
plot3d
?plot3d
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
?rgl.spheres
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
satellite_beta
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
Y
?rgl.spheres
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
source('~/Karol/Studia/SEMINARIUM_INZ/plotly/plot3d_part2.R')
rm(list = ls())
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
rgl.sprites()
rgl.sprites(c(0, 0, 0))
xyz.coords()
xyz.coords(4, 5, 6)
citation()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
shiny::runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
shiny::runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
sqrt(164)
sqrt(164.14)
pi
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ci
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
fr
gr
r
P
ci
P
P/(pi*r^2)
pi*r^2
diag
diag(1)
diag(c(rep(1, times = 7)))
c(1/4, 3/8, 1/2, 5/8, 3/4, 7/8, 1, diag(c(rep(1, times = 7))))
ui
matrix(c(1/4, 3/8, 1/2, 5/8, 3/4, 7/8, 1),
ncol = 7, nrow = 1, byrow = TRUE)
diag(diag(rep(1, times = 7)))
diag(rep(1, times = 7))
as.vector(diag(rep(1, times = 7)))
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptm
.constrOptim
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
.constrOptim
read.table("http://robotics.ai.uiuc.edu/~hyoon24/proj1log.txt")
library(tibble)
library(readr)
TD <- read_table("http://robotics.ai.uiuc.edu/~hyoon24/proj1log.txt")
?read_table
source('~/Karol/Studia/SEMINARIUM_INZ/kalman/symulacje/f_kalmana_sym_1.R')
str(TD)
TD
ggplot(data = TD, mapping = aes(x = X2, y = X3))
ggplot(data = TD, mapping = aes(x = X2, y = X3)) + geom_line()
library(ggplot2)
ggplot(data = TD, mapping = aes(x = X2, y = X3)) + geom_line()
ggplot(data = TD, mapping = aes(x = X2, y = X3)) + geom_point()
shiny::runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
funs <- c("exp(x)", "sin(x)")
getFormula(funs)
formula_ <- funs %>%
str_c(collapse = "+") %>%
str_c("y~0 +", .) %>%
formula
formula_
source('~/Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1/aproks_proba02.R')
source('~/Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1/aproks_proba02.R')
model$data
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
rm(list = ls())
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
rm(list = ls())
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
shiny::runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
source('~/Karol/Usun/skrypt_lm.R')
tab_dane <- attenu
model <- lm(y~0 +I(sin(x))+I(cos(x)))
xx <- seq(min(x), max(x), len = 100)
yy <- with(model, predict(xx))
model
str(model)
class(model)
source('~/Karol/Usun/skrypt_lm.R')
source('~/Karol/Usun/skrypt_lm.R')
rm(list = ls())
source('~/Karol/Usun/skrypt_lm.R')
predict.lm(model)
source('~/Karol/Usun/skrypt_lm.R')
yy
runApp('Karol/Studia/ZAJECIA/TworzeniePakietowR/projekt_ver1')
rm(list = ls())
setwd("~/GitHub/natryski/podejscie_pierwsze")
source('~/GitHub/natryski/podejscie_pierwsze/proba01.R')
ui
.constrOptim
installed.packages()
"ROI" %in% names(installed.packages())
install.packages("ROI")
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R')
?ROI
?`ROI-package`
?constrOptim
R
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
R
alhpa
alpha
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokaty
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokaty
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
norm
seq_len(length(wielokaty))
seq_len(length(wielokaty$x))
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
?nrom
?norm
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
boki_normy
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
poz_
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokaty
poz_
apply(wielokaty, 1, norm, type = "2")
?norm
require(spatial)
SpatialPolygons
require(sp)
Polygon(wielokaty)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat
plot(wielokat)
polygon(Polygon)
polygon(wielokat)
spplot(wielokat)
methods(Polygon)
LineLength(wielokat)
LineLengths(wielokat)
LinesLength(wielokat)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
Lines
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
install.packages("binhf")
require(binhf)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat
i <- 2
p1 <- wielokat[i-1, ]
p1
p2 <- wielokat[i, ]
p2
norm(p1, p2)
binhf::norm(p1, p2)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
# Wielokąt o n wierzchołkach.
n <- 6
srodek_ <- list(x = 2, y = 4)
R_min <- 2
R_max <- 10
R <- runif(n, R_min, R_max)
alpha <- sort(runif(n, .Machine$double.eps, 2*pi))
wielokat <- tibble(x = c(R*cos(alpha), R[1]*cos(alpha[1])),
y = c(R*sin(alpha), R[1]*sin(alpha[1])))
2 : length(nrow(wielokat))
nrow(wielokat)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
lens
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
poz_
lens
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
poz_
poz_
library(raster)
install.packages("raster")
raster::extent(wielokat)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
max_min
p1 <- wielokat[poz_, ]
p1
wielokat1 <- wielokat - p1
matrix(p1, ncol = 7)
matrix(p1, nrol = 7, ncol = 2)
matrix(p1, nrow = 7, ncol = 2)
matrix(p1, nrow = 7, ncol = 2, byrow = FALSE)
matrix(p1, nrow = 7, ncol = 2, byrow = TRUE)
p1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
wielokat
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat
wielokat1
unlist(wielokat1)
plyr::a_ply(.fun = x - p1)
?a_ply
wielokat %>% plyr::a_ply(.margin = 1, .fun = x - p1)
wielokat %>% plyr::a_ply(.margin = 1, .fun = funtion(x) x - p1)
wielokat %>% plyr::a_ply(.margin = 1, .fun = function(x) x - p1)
w1 <- wielokat %>% plyr::a_ply(.margin = 1, .fun = function(x) x - p1)
w1
p1
wielokat
n <- 6
srodek_ <- list(x = 2, y = 4)
R_min <- 2
R_max <- 10
R <- runif(n, R_min, R_max)
alpha <- sort(runif(n, .Machine$double.eps, 2*pi))
wielokat <- tibble(x = srodek_$x + c(R*cos(alpha), R[1]*cos(alpha[1])),
y = srodek_$y + c(R*sin(alpha), R[1]*sin(alpha[1])))
lens <- sapply(2:nrow(wielokat), function(i) {
p1 <- wielokat[i-1, ]
p2 <- wielokat[i, ]
len <- binhf::norm(p1, p2)
return(len)
})
poz_ <- lens %>% which.max
plot(NA, NA, xlim = c(-10, 10), ylim = c(-10, 10))
lines(wielokat, type = "l")
abline(h = 0, v = 0, col = "red")
wielokat1 <- wielokat
p1 <- wielokat[poz_, ]
wielokat %>% plyr::a_ply(.margin = 1, .fun = function(x) x - p1)
wielokat
wielokat1
wielokat %>% plyr::adply(.margin = 1, .fun = function(x) x - p1)
p1
wielokat
wielokat %>% plyr::adply(.margin = 1, .fun = function(x) x - p1)
wielokat
require(plyr)
wielokat %>% adply(1, function(x) x - p1)
wielokat[1, ]
wielokat[1, ] - p1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
adply(wielokat, 1, function(x) x - p1)
adply(wielokat, 1, function(x) -p1)
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wiellokat1
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
unlist(wielokat1)
as.data.frame(unlist(wielokat1))
data.frame(unlist(wielokat1))
mutate(unlist(wielokat1), x = x)
mutate(wielokat1, )
mutate(wielokat1, unlist)
mutate(wielokat1, x = x, y = y)
wielokat1
rbind(wielokat1)
w1 <- rbind(wielokat1)
w1
w1[,1]
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
unlist(wielokat1)
unlist(wielokat1)]["x"]
unlist(wielokat1)["x"]
names(wielokat1)
unlist(wielokat1)$
unlist(wielokat1)$x
w1 <- unlist(wielokat1)
names(w1)
w1["x"]
w1["x",]
w1[which(names(w1) == "x")]
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
?mutate
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
wielokat1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
n1 <- binhf::norm(c(0,0), p1)
n1
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
beta
r_new <- binhf::norm(c(0,0), wielokat[poz_ + 1, ])
r_new
beta <- acos(p1$x / r_new)
beta
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
lens
r_new
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
r_new
lens
coords
wielokat
wielokat``
wielokat1
poz_
norm(wielokat1[poz_, ], wielokat[poz_ + 1,])
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
mac_obrotu <- matrix(c(cos(beta), -sin(beta), sin(beta), cos(beta)), nrow = 2)
mac_obrotu
beta
pp1 <- wielokat1[1, ]
pp1
pp1 <- wielokat1[3, ]
pp1
t(pp1)
mac_bortu %*% t(pp1)
mac_obrotu %*% t(pp1)
t(mac_obrotu %*% t(pp1))
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba02.R', encoding = 'UTF-8')
