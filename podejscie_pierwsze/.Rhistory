ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych prostopadłych do osi X
n <- ceiling(ext@ymax / h)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
)
show(ggp)
n
R
source('~/GitHub/natryski/podejscie_pierwsze/fig_create.R')
source('~/GitHub/natryski/podejscie_pierwsze/fig_transform.R', encoding = 'UTF-8')
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych prostopadłych do osi X
n <- ceiling(ext@ymax / h)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
)
show(ggp)
geom_abline
?geom_abline
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = intercept,
data = tibble(slope = rep(n, tan(pi/6)),
intercept = seq(0, n-1)*h))
)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = intercept),
data = tibble(slope = rep(n, tan(pi/6)),
intercept = seq(0, n-1)*h)
)
show(ggp)
tibble(slope = rep(n, tan(pi/6)),
intercept = seq(0, n-1)*h)
tibble(slope = rep(n01, tan(pi/6)), intercept = seq(0, n-1)*h)
tibble(slope = rep(n-1, tan(pi/6)), intercept = seq(0, n-1)*h)
tibble(intercept = seq(0, n-1)*h)
n
tibble(slope = rep(tan(pi/6), times = n-1),intercept = seq(0, n-1)*h)
rep(tan(pi/6), times = n-1)
rep(tan(pi/6), times = n)
slope = tan(pi/6)
tibble(slope = tan(pi/6), intercept = seq(0, n-1)*h)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = intercept),
data = tibble(slope = tan(pi/6),
intercept = seq(0, n-1)*h)
)
show(ggp)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = intercept),
data = tibble(slope = tan(pi/6),
intercept = seq(0, n-1)*h)
)
ggp
tibble(slope = tan(pi/6),
intercept = seq(0, n-1)*h)
.data <- tibble(slope = tan(pi/6), intercept = seq(0, n-1)*h)
.data
ggp <- ggp + geom_abline(mapping = aes(slope = slope, intercept = intercept), data = .data)
ggp
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych prostopadłych do osi X
n <- ceiling(ext@ymax / h)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/6),
.intercept = seq(0, n-1)*h)
)
show(ggp)
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych prostopadłych do osi X
n <- ceiling(ext@ymax / h)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/6),
.intercept = seq(-n+1, n-1)*h)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*h)
)
show(ggp)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*R)
) + geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*R)
) + geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl))
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*2*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R/2
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling(ext@ymax / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*2*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- ceiling( (ext@ymax - ext@ymin) / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*2*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- 10 # ceiling( (ext@ymax - ext@ymin) / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*2*R)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*2*R)
)
show(ggp)
wielokat <- readRDS("wielokat_trans.Rds")
ggp <- ggplot(data = wielokat,
mapping = aes(x = x, y = y)) +
geom_polygon(fill = "red", alpha = 0.4)
# Promień okręgu, którym dysponujemy.
R <- 8.5
# Wysokość trójkąta
h <- sqrt(3)*R
# Punkty ekstremalne zbioru
ext <- raster::extent(wielokat)
# Liczba prostych równoległych do osi X
n_prlr <- 10 # ceiling( (ext@ymax - ext@ymin) / h)
# Liczba prostych prostopadłych do osi x
n_ortgnl <- ceiling((ext@xmax - ext@xmin) / R)
ggp <- ggp +
geom_hline(
mapping = aes(yintercept = intercept),
data = tibble(intercept = seq(0, n_prlr)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(pi/3),
.intercept = seq(-n_ortgnl, n_prlr-1)*h)
) +
geom_abline(
mapping = aes(slope = slope,
intercept = .intercept),
data = tibble(slope = tan(2*pi/3),
.intercept = seq(0, n_ortgnl)*h)
)
show(ggp)
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba03.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/imports.R')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
setwd("~/GitHub/natryski/podejscie_pierwsze")
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
install.packages("pixmap")
library(pixmap)
?pixmap
system("convert rys02.png rys02.ppm")
source('~/Karol/Studia/SEMINARIUM_INZ/nadajnik/proba_nadajnik.R')
setwd("~/Karol/Studia/SEMINARIUM_INZ/nadajnik")
source('~/Karol/Studia/SEMINARIUM_INZ/nadajnik/proba_nadajnik.R')
str(TD)
TD
?readxl::read_excel
source('~/Karol/Studia/SEMINARIUM_INZ/nadajnik/proba_nadajnik.R')
str(TD)
View(TD)
source('~/Karol/Studia/SEMINARIUM_INZ/nadajnik/proba_nadajnik.R')
str(TD)
devtools::load_all(".")
df <- read_excel(test_sheet("GPS_eksport_danych_2017-06-20.xls"))
df <- readxl::read_excel(test_sheet("GPS_eksport_danych_2017-06-20.xls"))
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
setwd("~/GitHub/natryski/podejscie_pierwsze")
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/fig_create.R')
source('~/GitHub/natryski/podejscie_pierwsze/fig_transform.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/fig_create.R')
source('~/GitHub/natryski/podejscie_pierwsze/fig_transform.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/fig_create.R')
source('~/GitHub/natryski/podejscie_pierwsze/fig_transform.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/fig_create.R')
source('~/GitHub/natryski/podejscie_pierwsze/fig_transform.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
circles
wielokat
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
source('~/GitHub/natryski/podejscie_pierwsze/proba04.R', encoding = 'UTF-8')
?sample
source('~/GitHub/natryski/podejscie_pierwsze/mechanism.R')
rm(list = ls())
source('~/GitHub/natryski/podejscie_pierwsze/mechanism.R')
wielokat
circles
